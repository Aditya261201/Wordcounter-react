{"version":3,"sources":["Components/Navbar.js","Components/Textform.js","Components/About.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","react_router_dom","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","abouttext","class","onClick","setTheme","name","autocomplete","checked","for","toggleMode","role","htmlFor","modetext","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","heading","style","backgroundColor","color","onChange","event","console","log","target","value","rows","placeholder","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","filter","element","About","myStyle","border","borderColor","aria-labelledby","data-bs-parent","Alert","height","alert","msg","defaultProps","App","setDarkMode","_useState3","_useState4","changeModeText","_useState5","_useState6","setAlert","message","setTimeout","document","getElementById","body","react_router","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.085ee141.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n\r\n\r\n    return (\r\n        // its an bootstrap navbar used as a component\r\n        // whenever we use bootstrap components we have to ensure that we have to write className=\"\" instead of class=\"\" , close all the tags even if ending tag isn't there we have to end it with /  (ie  <img src=\"\" />)\r\n\r\n\r\n        // this component can be reused as many times we want . so if we want to change any property at time of addding this component to main app.js file then we can use props(means properties).\r\n        //props can be specified in the componets as {props.title},{props.text} etc..  and their value/data can be passed to the component while adding them to the main app.js file i.e title=\"____\" , text=\"____\" \r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">\r\n                    {/* prop */}\r\n                    {props.title}\r\n                </Link>\r\n                <button\r\n                    className=\"navbar-toggler\"\r\n                    type=\"button\"\r\n                    data-bs-toggle=\"collapse\"\r\n                    data-bs-target=\"#navbarSupportedContent\"\r\n                    aria-controls=\"navbarSupportedContent\"\r\n                    aria-expanded=\"false\"\r\n                    aria-label=\"Toggle navigation\"\r\n                >\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">\r\n                                Home\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/About\">\r\n                                {/* prop */}\r\n                                {props.abouttext}\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\" role=\"search\">\r\n                        <input\r\n                            className=\"form-control me-2\"\r\n                            type=\"search\"\r\n                            placeholder=\"Search\"\r\n                            aria-label=\"Search\"\r\n                        />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                            Search\r\n                        </button>\r\n                    </form> */}\r\n\r\n                    <div className=\"mx-2\">\r\n                    <input type=\"radio\" class=\"btn-check mx-2\" onClick={props.setTheme} name=\"options-outlined\" id=\"secondary-outlined\" autocomplete=\"off\" checked />\r\n                    <label className=\"btn btn-outline-secondary mx-2 my-2\" for=\"secondary-outlined\">Default</label>\r\n\r\n                    <input type=\"radio\" class=\"btn-check mx-2\" onClick={props.setTheme} name=\"options-outlined\" id=\"success-outlined\" autocomplete=\"off\" />\r\n                    <label className=\"btn btn-outline-success mx-2 my-2\" for=\"success-outlined\">GreenTheme</label>\r\n\r\n                    <input type=\"radio\" class=\"btn-check mx-2\" onClick={props.setTheme} name=\"options-outlined\" id=\"danger-outlined\" autocomplete=\"off\" />\r\n                    <label className=\"btn btn-outline-danger mx-2 my-2\" for=\"danger-outlined\">RedTheme</label>\r\n                    </div>\r\n\r\n                    <div className={`form-check form-switch text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.modetext}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\n// it specifies about the props so that if we pass some other kind of value for props then we can be notified.\r\n// and if its important to give the prop value then we can set .isRequired\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    abouttext: PropTypes.string\r\n};\r\n\r\n\r\n\r\n// its used to give default values to the props \r\n\r\nNavbar.defaultProps = {\r\n    title: 'Stranger',\r\n    abouttext: \"about me\"\r\n};","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n\r\n    // here text is a variable , which is in a state having value \"Enter your text\".\r\n    // we cant change the value of text directly ie. text =\"__\" ........if we wanna change the value we have to use setText function.\r\n    // we can't change the state directly we must have to use the function.\r\n    const [text, setText] = useState(\"\");\r\n\r\n\r\n\r\n    const handleOnChange = (event) => {\r\n        console.log(\"on change\");\r\n        // here event is occured as text state is changed so we have to change the value of the text as- \r\n        setText(event.target.value);\r\n        // if we havent done this then we will not be able to change the value of the text. ie in textarea the value is set as {text} which was not changed.\r\n    }\r\n    const UcaseClick = () => {\r\n        console.log(\"Uppercase was clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to uppercase','Success');\r\n    }\r\n    const LcaseClick = () => {\r\n        console.log(\"Lowercase was clicked\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to lowercase','Success');\r\n    }\r\n    const copy= () => {\r\n        console.log(\"Copy was clicked\");\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert('Text Copied','Success');\r\n    }\r\n    const ClearClick = () => {\r\n        console.log(\"Textbox cleared\");\r\n        let newText =\"\";\r\n        setText(newText);\r\n        props.showAlert('Textbox cleared','Success');\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mb-3\">\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" style={{backgroundColor: props.mode ==='dark'?'#9e9696':'white',color: props.mode ==='dark'?'white':'black'}} id=\"textbox\" onChange={handleOnChange} value={text} rows=\"6\" placeholder=\"enter your text here..\"></textarea>\r\n                    {/* in textarea we have to listen for onChange function because here value={text} is a state and which is constantly monitored by react so if we want to change the value of text we have to set it on onChange function .otherwise we will not be able to change the value of textfield*/}\r\n                </div>\r\n                <div>\r\n                    <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={UcaseClick}>Convert to UpperCase</button>\r\n                    <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={LcaseClick}>Convert to LowerCase</button>\r\n                    <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={copy}>Copy Text</button>\r\n                    <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={ClearClick}>Clear</button>\r\n                </div>\r\n            </div>\r\n            <h2>YOUR TEXT SUMMARY</h2>\r\n            <p style={{color: props.mode ==='dark'?'white':'black'}}>{text.split(/\\s+/).filter((element) =>{return element.length !== 0}).length} words and {text.length} characters</p>\r\n            <h2>Preview</h2>\r\n            <p style={{color: props.mode ==='dark'?'white':'black'}}>{text.length>0?text:\"Enter something in the above textbox to preview it here..\"}</p>\r\n            \r\n        </>\r\n    );\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    // here we have used myStyle(for changing css) and btnText(for changing button text) as states.\r\n    // also here myStyle is used as a object  \r\n    // and onClick we are changing the states by toggleStyle function\r\n\r\n\r\n\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white'\r\n    // })\r\n    \r\n\r\n    let myStyle = {\r\n        color: props.mode==='dark'?'white':'#6e6767',\r\n        backgroundColor: props.mode==='dark'?'#808080':'white',\r\n    }\r\n\r\n    // const [btnText,setBtnText] = useState(\"Enable dark mode\")\r\n\r\n\r\n    // const toggleStyle = () => {\r\n    //     if (myStyle.color === 'white') {\r\n    //         setMyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white'\r\n    //         })\r\n    //         setBtnText(\"Enable dark mode\")\r\n    //     }\r\n    //     else{\r\n    //         setMyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black'\r\n    //         })\r\n    //         setBtnText(\"Enable light mode\")\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h1 className=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\" style={myStyle} id=\"accordionExample\">\r\n                <div className=\"accordion-item\" style={{border:'2px solid',borderColor: props.mode==='dark'?'white': '#808080'}}>\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={{border:'2px solid',borderColor: props.mode==='dark'?'white': '#808080'}}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={{border:'2px solid',borderColor: props.mode==='dark'?'white': '#808080'}}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* <button className=\"btn btn-primary my-2\" onClick={toggleStyle}>{btnText}</button> */}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        // here we set all this in a div and set its height i.e if alert comes and dissappears then the content doesnt shift . so we give a specified space for the alert element\r\n        <div style={{height: '50px'}}>\r\n            {/* here if props.alert is null then the statement further && is not checked ...and if props.alert isn't null then the further statement is called.. */}\r\n        {props.alert && <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n            <strong>{props.alert.type}</strong>:{props.alert.msg}\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n","import Navbar from './Components/Navbar';\nimport Textform from './Components/Textform';\nimport About from './Components/About';\nimport Alert from './Components/Alert';\nimport React, { useState } from 'react';\nimport {\n  BrowserRouter,\n  Route,\n  Routes,\n} from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode, setDarkMode] = useState('light'); // tells whether dark mode is on or off.\n  const [modetext, changeModeText] = useState(\"Darkmode\");\n  const [alert, setAlert] = useState(null);\n  // const [theme,setTheme]=useState('default');\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setDarkMode('dark')\n      changeModeText('Lightmode');\n      document.body.style.backgroundColor = 'grey'\n      showAlert('Darkmode has been enabled', 'Success');\n    }\n    else {\n      setDarkMode('light')\n      changeModeText('Darkmode');\n      document.body.style.backgroundColor = 'white'\n      showAlert('Darkmode has been disabled', 'Success');\n    }\n  }\n\n  const setTheme = () => {\n    if (document.getElementById('secondary-outlined').checked === true) {\n      document.body.style.color='black';\n      document.getElementById('textbox').style.border= '2px solid black';\n      // document.getElementById('headingOne').style.border= '2px solid black';\n      // document.getElementById('headingTwo').style.border= '2px solid black';\n      // document.getElementById('headingThree').style.border= '2px solid black';\n    } \n    else if (document.getElementById('success-outlined').checked === true) {\n      document.body.style.color='green';\n      document.getElementById('textbox').style.border= '2px solid green';\n      // document.getElementById('headingOne').style.border= '2px solid green';\n      // document.getElementById('headingTwo').style.border= '2px solid green';\n      // document.getElementById('headingThree').style.border= '2px solid green';\n    }\n    else {\n      document.body.style.color='red';\n      document.getElementById('textbox').style.border= '2px solid red';\n      // document.getElementById('headingOne').style.border= '2px solid red';\n      // document.getElementById('headingTwo').style.border= '2px solid red';\n      // document.getElementById('headingThree').style.border= '2px solid red'; \n    }\n  }\n\n  return (\n    <>\n    <BrowserRouter>\n      {/* here navbar is a component and title is a prop which is passed in it.  */}\n      <Navbar title=\"aadi\" mode={mode} setTheme={setTheme} toggleMode={toggleMode} modetext={modetext} />\n      <Alert alert={alert} />\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/about\" element={<About mode={mode} setTheme={setTheme}/>}/>\n          <Route path=\"/\" element={<Textform showAlert={showAlert} heading=\"Word Counter | Character counter | Uppercase to lowercase | LowerCase to uppercase\" mode={mode} />}/>\n        </Routes>\n      </div>\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}